<!DOCTYPE html>
{{- template "head.gohtml" (dict "Title" "Ball SVG") -}}

<style>
  svg {
    width: 500px;
    height: 500px;
    border: 1px dashed gray;
  }

  label {
    font-family: 'Courier New', monospace; {{/* 為了讓&nbsp;不受到Proportional的影響，所以都改成定距字，使的寬度都相同 */}}
  }
</style>

{{- template "focusOne.gohtml" . }}
{{define "body" }}
  <header>
    <h1 style="margin:0">立體球</h1>
  </header>

  <div>
    <h3>Stop Color</h3>
    <label>1</label>
    <input type="color" class="color-picker" data-id="1" value="#ffffff" title="Choose your color">

    <label>2</label>
    <input type="color" class="color-picker" data-id="2" value="#99ff99" title="Choose your color">

    <label>3</label>
    <input type="color" class="color-picker" data-id="3" value="#337733" title="Choose your color">

    <label>4</label>
    <input type="color" class="color-picker" data-id="4" value="#000000" title="Choose your color">
  </div>

  <div>
    <h3>Rotate</h3>
    <p>Right mouse button - rotate</p>
  </div>

  <div>
    <h3>circle x, circle y, radius</h3>
    <label>CX
      <input id="inputCx" type="range" min="0" max="1" step="0.01" value="0.3" aria-label=""
             oninput="this.nextElementSibling.value = this.value">
      <output>0.3</output>
    </label><br>
    <label>CY
      <input id="inputCy" type="range" min="0" max="1" step="0.01" value="0.3" aria-label=""
             oninput="this.nextElementSibling.value = this.value">
      <output>0.3</output>
    </label><br>
    <label>R&nbsp;
      <input id="inputR" type="range" min="0" max="1" step="0.01" value="0.7" aria-label=""
             oninput="this.nextElementSibling.value = this.value">
      <output>0.7</output>
    </label>
  </div>

  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
    <defs>
      <radialGradient id="r1" cx=".3" cy=".3" r=".7">
        <stop id="stop-1" offset="0%" stop-color="white"></stop>
        <stop id="stop-2" offset="30%" stop-color="#9f9"></stop>
        <stop id="stop-3" offset="70%" stop-color="#373"></stop>
        <stop id="stop-4" offset="100%" stop-color="black"></stop>
      </radialGradient>
    </defs>
    <circle cx="50" cy="50" r="25" fill="url(#r1)"
            transform="rotate(0 50 50)" {{- /* (degrees x y)  x, y指的是要用哪一個座標點當作基準去旋轉，預設是0,0 */ -}}
    />
  </svg>
{{end -}}

<script>

  const dqs = (name) => document.querySelector(name);
  const svg = dqs(`svg`)

  function initRotateBehavior() {
    let isRotating = false
    svg.addEventListener("mousedown", (e) => {
      if (e.button !== 2) { // 2: right button
        return
      }
      isRotating = true
    })

    svg.addEventListener("mouseup", () => {
      isRotating = false
    })

    svg.addEventListener("mousemove", (e) => {
      if (!isRotating) {
        return
      }
      /* Deprecated. Use DOMPoint or DOMPointReadOnly instead.
      const pt = svg.createSVGPoint()
      pt.x = e.clientX
      pt.y = e.clientY
      pt.matrixTransform(svg.getScreenCTM().inverse())
       */
      const domPoint = new DOMPointReadOnly(e.clientX, e.clientY);
      const loc = domPoint.matrixTransform(svg.getScreenCTM().inverse())
      const [x1, y1] = [loc.x, loc.y]
      const [cx, cy] = [50, 50]
      const degrees = Math.atan2(y1 - cy, x1 - cx) * 180 / Math.PI
      const circle = svg.querySelector(`circle`)
      circle.setAttribute("transform", `rotate(${degrees} 50 50)`)
    })
  }

  [...document.querySelectorAll(`input[class="color-picker"]`)].forEach(inputElem => {
    inputElem.onchange = (e) => {
      const stopElem = dqs(`#stop-${inputElem.dataset.id}`)
      stopElem.setAttribute("stop-color", inputElem.value)
    }
  })

  document.body.oncontextmenu = () => false // 不要顯示右鍵菜單
  initRotateBehavior()

  dqs(`#inputCx`).onchange = (e) => svg.querySelector(`radialGradient`).setAttribute("cx", e.target.value)
  dqs(`#inputCy`).onchange = (e) => svg.querySelector(`radialGradient`).setAttribute("cy", e.target.value)
  dqs(`#inputR`).onchange = (e) => svg.querySelector(`radialGradient`).setAttribute("r", e.target.value)
</script>
